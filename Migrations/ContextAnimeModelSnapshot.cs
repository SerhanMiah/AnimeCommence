// <auto-generated />
using System;
using AnimeShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AnimeShop.Migrations
{
    [DbContext(typeof(ContextAnime))]
    partial class ContextAnimeModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AnimeShop.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/onepiece/images/c/c6/Volume_100.png/revision/latest?cb=20210903160940",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 2,
                            ImageUrl = "https://d28hgpri8am2if.cloudfront.net/book_images/onix/cvr9781421564609/one-piece-vol-70-9781421564609_hr.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 3,
                            ImageUrl = "https://img.asmedia.epimg.net/resizer/0AAWhRs-18LkHLrC1Zp3X1c2y9Y=/1472x828/cloudfront-eu-central-1.images.arcpublishing.com/diarioas/7FLY3ULLSRH2VCC3DDTEQDXMKI.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 4,
                            ImageUrl = "https://your-url.com/death-note.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ImageId = 5,
                            ImageUrl = "https://your-url.com/attack-on-titan.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 6,
                            ImageUrl = "https://your-url.com/FullMetal_Alchemist_Brotherhood_DVD.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            ImageId = 7,
                            ImageUrl = "https://your-url.com/Death_Note_DVD.jpg",
                            ProductId = 7
                        },
                        new
                        {
                            ImageId = 8,
                            ImageUrl = "https://your-url.com/Attack_on_Titan_DVD.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            ImageId = 9,
                            ImageUrl = "https://your-url.com/Naruto_Shippuden_DVD.jpg",
                            ProductId = 9
                        },
                        new
                        {
                            ImageId = 10,
                            ImageUrl = "https://your-url.com/Demon_Slayer_DVD.jpg",
                            ProductId = 10
                        },
                        new
                        {
                            ImageId = 21,
                            ImageUrl = "https://example.com/one-piece-hat.jpg",
                            ProductId = 11
                        },
                        new
                        {
                            ImageId = 22,
                            ImageUrl = "https://example.com/naruto-akatsuki-cloak.jpg",
                            ProductId = 12
                        },
                        new
                        {
                            ImageId = 23,
                            ImageUrl = "https://example.com/aot-survey-corps-jacket.jpg",
                            ProductId = 13
                        },
                        new
                        {
                            ImageId = 24,
                            ImageUrl = "https://example.com/fullmetal-alchemist-watch.jpg",
                            ProductId = 14
                        },
                        new
                        {
                            ImageId = 25,
                            ImageUrl = "https://example.com/death-note-notebook.jpg",
                            ProductId = 15
                        });
                });

            modelBuilder.Entity("AnimeShop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("longtext");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AnimeShop.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AnimeShop.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<float>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Category = "Manga",
                            Description = "A manga about pirates in search of the ultimate treasure.",
                            Genre = "Shonen",
                            Name = "One Piece",
                            Price = 10.99m,
                            Publisher = "Shueisha",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(1997, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 2,
                            Category = "Manga",
                            Description = "A manga about a ninja's journey to becoming the strongest in his village.",
                            Genre = "Shonen",
                            Name = "Naruto",
                            Price = 9.99m,
                            Publisher = "Shueisha",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(1999, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 3,
                            Category = "Manga",
                            Description = "A manga about a teenager who becomes a soul reaper.",
                            Genre = "Shonen",
                            Name = "Bleach",
                            Price = 10.99m,
                            Publisher = "Shueisha",
                            Rating = 4.7f,
                            ReleaseDate = new DateTime(2001, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 4,
                            Category = "Manga",
                            Description = "A manga about a high school student who discovers a notebook that allows him to kill anyone by writing their name in it.",
                            Genre = "Shonen",
                            Name = "Death Note",
                            Price = 11.99m,
                            Publisher = "Shueisha",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(2003, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 5,
                            Category = "Manga",
                            Description = "A manga about humanity's fight for survival against giant humanoid creatures.",
                            Genre = "Seinen",
                            Name = "Attack on Titan",
                            Price = 10.99m,
                            Publisher = "Kodansha",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(2009, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 6,
                            Category = "DVD",
                            Description = "The complete first season of My Hero Academia anime series on DVD.",
                            Genre = "Shonen",
                            Name = "My Hero Academia Season 1",
                            Price = 24.99m,
                            Publisher = "Funimation",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(2016, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 7,
                            Category = "DVD",
                            Description = "The complete first season of One Punch Man anime series on DVD.",
                            Genre = "Seinen",
                            Name = "One Punch Man Season 1",
                            Price = 19.99m,
                            Publisher = "Viz Media",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(2015, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 8,
                            Category = "DVD",
                            Description = "The complete first season of Demon Slayer: Kimetsu no Yaiba anime series on DVD.",
                            Genre = "Shonen",
                            Name = "Demon Slayer: Kimetsu no Yaiba Season 1",
                            Price = 24.99m,
                            Publisher = "Aniplex",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(2019, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 9,
                            Category = "DVD",
                            Description = "The complete first season of Attack on Titan anime series on DVD.",
                            Genre = "Seinen",
                            Name = "Attack on Titan Season 1",
                            Price = 29.99m,
                            Publisher = "Funimation",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(2013, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 10,
                            Category = "DVD",
                            Description = "The complete series of Naruto Shippuden anime on DVD.",
                            Genre = "Shonen",
                            Name = "Naruto Shippuden Complete Series",
                            Price = 199.99m,
                            Publisher = "Viz Media",
                            Rating = 4.7f,
                            ReleaseDate = new DateTime(2017, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 11,
                            Category = "Merchandise",
                            Description = "Straw Hat of the iconic Monkey D. Luffy from One Piece.",
                            Genre = "Shonen",
                            Name = "One Piece Straw Hat",
                            Price = 19.99m,
                            Publisher = "Toei Animation",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 12,
                            Category = "Merchandise",
                            Description = "Cloak worn by the members of Akatsuki from Naruto.",
                            Genre = "Shonen",
                            Name = "Naruto Akatsuki Cloak",
                            Price = 59.99m,
                            Publisher = "Studio Pierrot",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 13,
                            Category = "Merchandise",
                            Description = "Survey Corps Jacket from Attack on Titan.",
                            Genre = "Seinen",
                            Name = "Attack on Titan Survey Corps Jacket",
                            Price = 49.99m,
                            Publisher = "Wit Studio",
                            Rating = 4.7f,
                            ReleaseDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 14,
                            Category = "Merchandise",
                            Description = "Pocket watch used by the State Alchemists in Fullmetal Alchemist.",
                            Genre = "Shonen",
                            Name = "Fullmetal Alchemist Pocket Watch",
                            Price = 29.99m,
                            Publisher = "Bones",
                            Rating = 4.9f,
                            ReleaseDate = new DateTime(2023, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProductId = 15,
                            Category = "Merchandise",
                            Description = "Replica of the Death Note used in the Death Note series.",
                            Genre = "Shonen",
                            Name = "Death Note Notebook",
                            Price = 14.99m,
                            Publisher = "Madhouse",
                            Rating = 4.8f,
                            ReleaseDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("AnimeShop.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("AnimeShop.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AnimeShop.Models.Image", b =>
                {
                    b.HasOne("AnimeShop.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AnimeShop.Models.Order", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeShop.Models.OrderItem", b =>
                {
                    b.HasOne("AnimeShop.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AnimeShop.Models.Review", b =>
                {
                    b.HasOne("AnimeShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AnimeShop.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("AnimeShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeShop.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("AnimeShop.Models.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
